type Post {
    id: ID!
    title: String!
    content: String!
    author: String!
    allowComments: Boolean!
    createdAt: String!
}

enum SortOrder {
    ASC
    DESC
}

type Comment {
    id: ID!
    postId: ID!
    parentId: ID
    text: String!
    author: String!
    createdAt: String!
    repliesCount: Int!
}

type CommentEdge {
    node: Comment!
    cursor: ID!
}

type CommentConnection {
    edges: [CommentEdge!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type PageInfo {
    hasNextPage: Boolean!
    endCursor: ID
    hasPreviousPage: Boolean!
    startCursor: ID
}

type Query {
    posts(
        after: ID
        first: Int = 10
        sortOrder: SortOrder = DESC
    ): [Post!]!

    post(id: ID!): Post

    comments(
        postID: ID!
        parentID: ID
        after: ID
        first: Int = 10
        sortOrder: SortOrder = ASC
    ): CommentConnection!

    commentsCount(postID: ID!, parentID: ID): Int!
}

type Mutation {
    createPost(
        title: String!
        content: String!
        author: String!
        allowComments: Boolean!
    ): Post!

    createComment(
        postId: ID!
        parentId: ID
        text: String!
        author: String!
    ): Comment!
}